/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package gov.nasa.gsfc.ccmc;

public class Fieldline {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Fieldline(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Fieldline obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CCMCJNI.delete_Fieldline(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Fieldline() {
    this(CCMCJNI.new_Fieldline__SWIG_0(), true);
  }

  public Fieldline(int initialSize) {
    this(CCMCJNI.new_Fieldline__SWIG_1(initialSize), true);
  }

  public void insertPointData(Point3f p, float d) {
    CCMCJNI.Fieldline_insertPointData(swigCPtr, this, Point3f.getCPtr(p), p, d);
  }

  public void removePoint(int index) {
    CCMCJNI.Fieldline_removePoint(swigCPtr, this, index);
  }

  public Fieldline reverseOrder() {
    return new Fieldline(CCMCJNI.Fieldline_reverseOrder(swigCPtr, this), true);
  }

  public void reverseOrderInPlace() {
    CCMCJNI.Fieldline_reverseOrderInPlace(swigCPtr, this);
  }

  public vector_point3f getPositions() {
    return new vector_point3f(CCMCJNI.Fieldline_getPositions(swigCPtr, this), false);
  }

  public vector_float getData() {
    return new vector_float(CCMCJNI.Fieldline_getData__SWIG_0(swigCPtr, this), false);
  }

  public int size() {
    return CCMCJNI.Fieldline_size(swigCPtr, this);
  }

  public Point3f getPosition(int i) {
    return new Point3f(CCMCJNI.Fieldline_getPosition(swigCPtr, this, i), false);
  }

  public float getData(int i) {
    return CCMCJNI.Fieldline_getData__SWIG_1(swigCPtr, this, i);
  }

  public Point3f getStartPoint() {
    return new Point3f(CCMCJNI.Fieldline_getStartPoint(swigCPtr, this), true);
  }

  public void reserve(int size) {
    CCMCJNI.Fieldline_reserve(swigCPtr, this, size);
  }

  public void setStartPoint(Point3f p) {
    CCMCJNI.Fieldline_setStartPoint(swigCPtr, this, Point3f.getCPtr(p), p);
  }

  public void setVariable(String variable) {
    CCMCJNI.Fieldline_setVariable(swigCPtr, this, variable);
  }

  public String getVariable() {
    return CCMCJNI.Fieldline_getVariable(swigCPtr, this);
  }

  public vector_float getDs() {
    return new vector_float(CCMCJNI.Fieldline_getDs(swigCPtr, this), false);
  }

  public vector_point3f getElements() {
    return new vector_point3f(CCMCJNI.Fieldline_getElements(swigCPtr, this), false);
  }

  public Point3f getElement(int i) {
    return new Point3f(CCMCJNI.Fieldline_getElement(swigCPtr, this, i), false);
  }

  public vector_float integrate() {
    return new vector_float(CCMCJNI.Fieldline_integrate(swigCPtr, this), false);
  }

  public vector_float derivative() {
    return new vector_float(CCMCJNI.Fieldline_derivative(swigCPtr, this), false);
  }

  public vector_float measure() {
    return new vector_float(CCMCJNI.Fieldline_measure(swigCPtr, this), false);
  }

  public float getLength(int i) {
    return CCMCJNI.Fieldline_getLength(swigCPtr, this, i);
  }

  public float getIntegral(int i) {
    return CCMCJNI.Fieldline_getIntegral(swigCPtr, this, i);
  }

  public Fieldline interpolate(int option, int Npoints) {
    return new Fieldline(CCMCJNI.Fieldline_interpolate(swigCPtr, this, option, Npoints), true);
  }

  public vector_int getNearest() {
    return new vector_int(CCMCJNI.Fieldline_getNearest(swigCPtr, this), false);
  }

  public vector_float getTlocal() {
    return new vector_float(CCMCJNI.Fieldline_getTlocal(swigCPtr, this), false);
  }

  public void minmax() {
    CCMCJNI.Fieldline_minmax(swigCPtr, this);
  }

  public void setMincount(int value) {
    CCMCJNI.Fieldline_mincount_set(swigCPtr, this, value);
  }

  public int getMincount() {
    return CCMCJNI.Fieldline_mincount_get(swigCPtr, this);
  }

  public void setMaxcount(int value) {
    CCMCJNI.Fieldline_maxcount_set(swigCPtr, this, value);
  }

  public int getMaxcount() {
    return CCMCJNI.Fieldline_maxcount_get(swigCPtr, this);
  }

  public void setMinima(vector_int value) {
    CCMCJNI.Fieldline_minima_set(swigCPtr, this, vector_int.getCPtr(value), value);
  }

  public vector_int getMinima() {
    long cPtr = CCMCJNI.Fieldline_minima_get(swigCPtr, this);
    return (cPtr == 0) ? null : new vector_int(cPtr, false);
  }

  public void setMaxima(vector_int value) {
    CCMCJNI.Fieldline_maxima_set(swigCPtr, this, vector_int.getCPtr(value), value);
  }

  public vector_int getMaxima() {
    long cPtr = CCMCJNI.Fieldline_maxima_get(swigCPtr, this);
    return (cPtr == 0) ? null : new vector_int(cPtr, false);
  }

  public void setGlobMinIndex(int value) {
    CCMCJNI.Fieldline_GlobMinIndex_set(swigCPtr, this, value);
  }

  public int getGlobMinIndex() {
    return CCMCJNI.Fieldline_GlobMinIndex_get(swigCPtr, this);
  }

  public void setGlobMaxIndex(int value) {
    CCMCJNI.Fieldline_GlobMaxIndex_set(swigCPtr, this, value);
  }

  public int getGlobMaxIndex() {
    return CCMCJNI.Fieldline_GlobMaxIndex_get(swigCPtr, this);
  }

}
