/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <ccmc/FileReader.h>
#include <ccmc/GeneralFileReader.h>
#include <ccmc/CDFFileReader.h>
#include <ccmc/Kameleon.h>
#include <ccmc/Interpolator.h>
#include <ccmc/KameleonInterpolator.h>
#include <ccmc/Tracer.h>
#include <ccmc/Fieldline.h>
#include <ccmc/Point3f.h>
#include <ccmc/Attribute.h>
#include <ccmc/Model.h>
#include <ccmc/BATSRUS.h>
#include <ccmc/ENLIL.h>
#include <ccmc/MAS.h>
#include <ccmc/OpenGGCM.h>
#include <ccmc/SWMFIono.h>
#include <ccmc/BATSRUSInterpolator.h>
#include <ccmc/ENLILInterpolator.h>
#include <ccmc/MASInterpolator.h>
#include <ccmc/OpenGGCMInterpolator.h>
#include <ccmc/SWMFIonoInterpolator.h>
#include <ccmc/CCMCTime.h>
using namespace std;
using namespace ccmc;



SWIGINTERN vector< ccmc::Point3f >::const_reference vector_Sl_Point3f_Sg__get(vector< Point3f > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void vector_Sl_Point3f_Sg__set(vector< Point3f > *self,int i,vector< ccmc::Point3f >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN vector< std::string >::const_reference vector_Sl_std_string_Sg__get(vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void vector_Sl_std_string_Sg__set(vector< std::string > *self,int i,vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN vector< float >::const_reference vector_Sl_float_Sg__get(vector< float > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void vector_Sl_float_Sg__set(vector< float > *self,int i,vector< float >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN vector< ccmc::Fieldline >::const_reference vector_Sl_Fieldline_Sg__get(vector< Fieldline > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void vector_Sl_Fieldline_Sg__set(vector< Fieldline > *self,int i,vector< ccmc::Fieldline >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN vector< int >::const_reference vector_Sl_int_Sg__get(vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void vector_Sl_int_Sg__set(vector< int > *self,int i,vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (long)(arg1)->open((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->open((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getVariable((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< float > *)(arg1)->getVariable(arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariable_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  result = (std::vector< float > *)(arg1)->getVariable((std::string const &)*arg2,arg3,arg4);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariable_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  result = (std::vector< float > *)(arg1)->getVariable(arg2,arg3,arg4);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariableAtIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  result = (float)(arg1)->getVariableAtIndex((std::string const &)*arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariableAtIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  long arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  result = (float)(arg1)->getVariableAtIndex(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariableInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< int > *)(arg1)->getVariableInt((std::string const &)*arg2);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariableIntAtIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  result = (int)(arg1)->getVariableIntAtIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getNumberOfGlobalAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  result = (int)(arg1)->getNumberOfGlobalAttributes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getNumberOfVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  result = (int)(arg1)->getNumberOfVariables();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getNumberOfVariableAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  result = (int)(arg1)->getNumberOfVariableAttributes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getNumberOfRecords_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->getNumberOfRecords((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getNumberOfRecords_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (long)(arg1)->getNumberOfRecords(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariableID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->getVariableID((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariableName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getVariableName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getGlobalAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  Attribute result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getGlobalAttribute(arg2);
  *(Attribute **)&jresult = new Attribute((const Attribute &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getGlobalAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getGlobalAttributeName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariableAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getVariableAttributeName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getGlobalAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  Attribute result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getGlobalAttribute((std::string const &)*arg2);
  *(Attribute **)&jresult = new Attribute((const Attribute &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getGlobalAttributeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->getGlobalAttributeID((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariableAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Attribute result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->getVariableAttribute((std::string const &)*arg2,(std::string const &)*arg3);
  *(Attribute **)&jresult = new Attribute((const Attribute &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getVariableAttributeNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  result = (arg1)->getVariableAttributeNames();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1doesAttributeExist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->doesAttributeExist((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1doesVariableExist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->doesVariableExist((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  result = (long)(arg1)->close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1getCurrentFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  result = (std::string *) &(arg1)->getCurrentFilename();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1initializeVariableIDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  (arg1)->initializeVariableIDs();
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1initializeVariableNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  (arg1)->initializeVariableNames();
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1closeFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  result = (long)(arg1)->closeFile();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1openFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (long)(arg1)->openFile((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1FileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::FileReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)ccmc::FileReader::OK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1OPEN_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)ccmc::FileReader::OPEN_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1FILE_1DOES_1NOT_1EXIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)ccmc::FileReader::FILE_DOES_NOT_EXIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1VARIABLE_1DOES_1NOT_1EXIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)ccmc::FileReader::VARIABLE_DOES_NOT_EXIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1ATTRIBUTE_1DOES_1NOT_1EXIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)ccmc::FileReader::ATTRIBUTE_DOES_NOT_EXIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1LOAD_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)ccmc::FileReader::LOAD_FAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1UNABLE_1TO_1ALLOCATE_1MEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)ccmc::FileReader::UNABLE_TO_ALLOCATE_MEMORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1VARIABLE_1NOT_1IN_1MEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)ccmc::FileReader::VARIABLE_NOT_IN_MEMORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1MODEL_1NOT_1SUPPORTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)ccmc::FileReader::MODEL_NOT_SUPPORTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_FileReader_1NOT_1A_1VALID_1KAMELEON_1FILE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)ccmc::FileReader::NOT_A_VALID_KAMELEON_FILE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1GeneralFileReader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::GeneralFileReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::GeneralFileReader *)new ccmc::GeneralFileReader();
  *(ccmc::GeneralFileReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->open((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getVariable((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< float > *)(arg1)->getVariable(arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariable_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  result = (std::vector< float > *)(arg1)->getVariable((std::string const &)*arg2,arg3,arg4);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariable_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  result = (std::vector< float > *)(arg1)->getVariable(arg2,arg3,arg4);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariableAtIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  result = (float)(arg1)->getVariableAtIndex((std::string const &)*arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariableAtIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  long arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  result = (float)(arg1)->getVariableAtIndex(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariableInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< int > *)(arg1)->getVariableInt((std::string const &)*arg2);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariableIntAtIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  result = (int)(arg1)->getVariableIntAtIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getNumberOfGlobalAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  result = (int)(arg1)->getNumberOfGlobalAttributes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getNumberOfVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  result = (int)(arg1)->getNumberOfVariables();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getNumberOfVariableAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  result = (int)(arg1)->getNumberOfVariableAttributes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getNumberOfRecords_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->getNumberOfRecords((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getNumberOfRecords_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (long)(arg1)->getNumberOfRecords(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariableID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->getVariableID((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariableName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getVariableName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getGlobalAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  Attribute result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getGlobalAttribute(arg2);
  *(Attribute **)&jresult = new Attribute((const Attribute &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getGlobalAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getGlobalAttributeName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariableAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getVariableAttributeName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getGlobalAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  Attribute result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getGlobalAttribute((std::string const &)*arg2);
  *(Attribute **)&jresult = new Attribute((const Attribute &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariableAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Attribute result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->getVariableAttribute((std::string const &)*arg2,(std::string const &)*arg3);
  *(Attribute **)&jresult = new Attribute((const Attribute &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getVariableAttributeNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  result = (arg1)->getVariableAttributeNames();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1doesAttributeExist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->doesAttributeExist((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1doesVariableExist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->doesVariableExist((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  result = (long)(arg1)->close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_GeneralFileReader_1getCurrentFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  result = (std::string *) &(arg1)->getCurrentFilename();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1GeneralFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::GeneralFileReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1CDFFileReader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::CDFFileReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::CDFFileReader *)new ccmc::CDFFileReader();
  *(ccmc::CDFFileReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getVariable((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< float > *)(arg1)->getVariable(arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariable_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  result = (std::vector< float > *)(arg1)->getVariable((std::string const &)*arg2,arg3,arg4);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariable_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  result = (std::vector< float > *)(arg1)->getVariable(arg2,arg3,arg4);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariableAtIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  result = (float)(arg1)->getVariableAtIndex((std::string const &)*arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariableAtIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  long arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  result = (float)(arg1)->getVariableAtIndex(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariableInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< int > *)(arg1)->getVariableInt((std::string const &)*arg2);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariableIntAtIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  result = (int)(arg1)->getVariableIntAtIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getNumberOfGlobalAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  result = (int)(arg1)->getNumberOfGlobalAttributes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getNumberOfVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  result = (int)(arg1)->getNumberOfVariables();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getNumberOfVariableAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  result = (int)(arg1)->getNumberOfVariableAttributes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getNumberOfRecords_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->getNumberOfRecords((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getNumberOfRecords_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (long)(arg1)->getNumberOfRecords(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariableID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->getVariableID((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariableName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getVariableName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getGlobalAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  Attribute result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getGlobalAttribute(arg2);
  *(Attribute **)&jresult = new Attribute((const Attribute &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getGlobalAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getGlobalAttributeName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariableAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getVariableAttributeName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getGlobalAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  Attribute result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getGlobalAttribute((std::string const &)*arg2);
  *(Attribute **)&jresult = new Attribute((const Attribute &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getGlobalAttributeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->getGlobalAttributeID((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariableAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Attribute result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->getVariableAttribute((std::string const &)*arg2,(std::string const &)*arg3);
  *(Attribute **)&jresult = new Attribute((const Attribute &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getVariableAttributeNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  result = (arg1)->getVariableAttributeNames();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1doesAttributeExist_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->doesAttributeExist((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1doesVariableExist_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->doesVariableExist((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1doesAttributeExist_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->doesAttributeExist(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1doesVariableExist_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->doesVariableExist(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1getCurrentFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  result = (std::string *) &(arg1)->getCurrentFilename();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1CDFFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::CDFFileReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_parseEPOCH3(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jdouble jresult = 0 ;
  char *arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (double)ccmc::parseEPOCH3(arg1);
  jresult = (jdouble)result; 
  
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_encodeEPOCH3(JNIEnv *jenv, jclass jcls, jdouble jarg1, jstring jarg2) {
  double arg1 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ccmc::encodeEPOCH3(arg1,arg2);
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_EPOCHbreakdown(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  double arg1 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  long *arg6 = (long *) 0 ;
  long *arg7 = (long *) 0 ;
  long *arg8 = (long *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = *(long **)&jarg2; 
  arg3 = *(long **)&jarg3; 
  arg4 = *(long **)&jarg4; 
  arg5 = *(long **)&jarg5; 
  arg6 = *(long **)&jarg6; 
  arg7 = *(long **)&jarg7; 
  arg8 = *(long **)&jarg8; 
  ccmc::EPOCHbreakdown(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Position_1c0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Position **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->c0 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Position_1c0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Position **)&jarg1; 
  result = (float) ((arg1)->c0);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Position_1c1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Position **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->c1 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Position_1c1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Position **)&jarg1; 
  result = (float) ((arg1)->c1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Position_1c2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Position **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->c2 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Position_1c2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Position **)&jarg1; 
  result = (float) ((arg1)->c2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Position(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::Position *)new ccmc::Position();
  *(ccmc::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1Position(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::Position **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Kameleon(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::Kameleon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::Kameleon *)new ccmc::Kameleon();
  *(ccmc::Kameleon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1Kameleon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  result = (long)(arg1)->close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1createNewInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  Interpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  result = (Interpolator *)(arg1)->createNewInterpolator();
  *(Interpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1doesAttributeExist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->doesAttributeExist((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1doesVariableExist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->doesVariableExist((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getConversionFactorToSI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jfloat jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (float)(arg1)->getConversionFactorToSI((std::string const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getCurrentFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  result = (std::string *) &(arg1)->getCurrentFilename();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getCurrentTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  Time result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  result = (arg1)->getCurrentTime();
  *(Time **)&jresult = new Time((const Time &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getGlobalAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  long arg2 ;
  Attribute result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getGlobalAttribute(arg2);
  *(Attribute **)&jresult = new Attribute((const Attribute &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getGlobalAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  Attribute result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getGlobalAttribute((std::string const &)*arg2);
  *(Attribute **)&jresult = new Attribute((const Attribute &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getGlobalAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getGlobalAttributeName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getLoadedVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  result = (arg1)->getLoadedVariables();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getMissingValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  result = (float)(arg1)->getMissingValue();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getModelName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  result = (std::string *) &(arg1)->getModelName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getNativeUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getNativeUnit((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getNumberOfGlobalAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  result = (int)(arg1)->getNumberOfGlobalAttributes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getNumberOfVariableAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  result = (int)(arg1)->getNumberOfVariableAttributes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getNumberOfVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  result = (int)(arg1)->getNumberOfVariables();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getSIUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getSIUnit((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getVariable((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getVariableAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Attribute result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->getVariableAttribute((std::string const &)*arg2,(std::string const &)*arg3);
  *(Attribute **)&jresult = new Attribute((const Attribute &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getVariableAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getVariableAttributeName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getVariableFromMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getVariableFromMap((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getVariableID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->getVariableID((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getVariableInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< int > *)(arg1)->getVariableInt((std::string const &)*arg2);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getVariableIntFromMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< int > *)(arg1)->getVariableIntFromMap((std::string const &)*arg2);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getVariableName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getVariableName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getVisUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getVisUnit((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1loadVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->loadVariable((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1loadVectorVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->loadVectorVariable((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->open((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1setMissingValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMissingValue(arg2);
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1unloadVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->unloadVariable((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1unloadVectorVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->unloadVectorVariable((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1getProgress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  result = (int)(arg1)->getProgress();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1_1cxform(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  ccmc::Position *arg4 = (ccmc::Position *) 0 ;
  ccmc::Position *arg5 = (ccmc::Position *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = *(ccmc::Position **)&jarg4; 
  arg5 = *(ccmc::Position **)&jarg5; 
  result = (int)ccmc::Kameleon::_cxform((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1_1cxRound(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (long)ccmc::Kameleon::_cxRound(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1_1date2es(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (long)ccmc::Kameleon::_date2es(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Kameleon_1_1gregorian_1calendar_1to_1jd(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jdouble jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (double)ccmc::Kameleon::_gregorian_calendar_to_jd(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_kameleonObjects_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::unordered_map< int,ccmc::Kameleon * > arg1 ;
  boost::unordered_map< int,ccmc::Kameleon * > *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::unordered_map< int,ccmc::Kameleon * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::unordered_map< int,ccmc::Kameleon * >");
    return ;
  }
  arg1 = *argp1; 
  ccmc::kameleonObjects = arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_kameleonObjects_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::unordered_map< int,ccmc::Kameleon * > result;
  
  (void)jenv;
  (void)jcls;
  result = ccmc::kameleonObjects;
  *(boost::unordered_map< int,ccmc::Kameleon * > **)&jresult = new boost::unordered_map< int,ccmc::Kameleon * >((const boost::unordered_map< int,ccmc::Kameleon * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_tracerObjects_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::unordered_map< int,ccmc::Tracer * > arg1 ;
  boost::unordered_map< int,ccmc::Tracer * > *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::unordered_map< int,ccmc::Tracer * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::unordered_map< int,ccmc::Tracer * >");
    return ;
  }
  arg1 = *argp1; 
  ccmc::tracerObjects = arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_tracerObjects_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::unordered_map< int,ccmc::Tracer * > result;
  
  (void)jenv;
  (void)jcls;
  result = ccmc::tracerObjects;
  *(boost::unordered_map< int,ccmc::Tracer * > **)&jresult = new boost::unordered_map< int,ccmc::Tracer * >((const boost::unordered_map< int,ccmc::Tracer * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_interpolatorObjects_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::unordered_map< int,ccmc::Interpolator * > arg1 ;
  boost::unordered_map< int,ccmc::Interpolator * > *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::unordered_map< int,ccmc::Interpolator * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::unordered_map< int,ccmc::Interpolator * >");
    return ;
  }
  arg1 = *argp1; 
  ccmc::interpolatorObjects = arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_interpolatorObjects_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::unordered_map< int,ccmc::Interpolator * > result;
  
  (void)jenv;
  (void)jcls;
  result = ccmc::interpolatorObjects;
  *(boost::unordered_map< int,ccmc::Interpolator * > **)&jresult = new boost::unordered_map< int,ccmc::Interpolator * >((const boost::unordered_map< int,ccmc::Interpolator * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_generalFileReaderObjects_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::unordered_map< int,ccmc::GeneralFileReader * > arg1 ;
  boost::unordered_map< int,ccmc::GeneralFileReader * > *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::unordered_map< int,ccmc::GeneralFileReader * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::unordered_map< int,ccmc::GeneralFileReader * >");
    return ;
  }
  arg1 = *argp1; 
  ccmc::generalFileReaderObjects = arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_generalFileReaderObjects_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::unordered_map< int,ccmc::GeneralFileReader * > result;
  
  (void)jenv;
  (void)jcls;
  result = ccmc::generalFileReaderObjects;
  *(boost::unordered_map< int,ccmc::GeneralFileReader * > **)&jresult = new boost::unordered_map< int,ccmc::GeneralFileReader * >((const boost::unordered_map< int,ccmc::GeneralFileReader * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_timeInterpolatorObjects_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::unordered_map< int,ccmc::TimeInterpolator * > arg1 ;
  boost::unordered_map< int,ccmc::TimeInterpolator * > *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::unordered_map< int,ccmc::TimeInterpolator * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::unordered_map< int,ccmc::TimeInterpolator * >");
    return ;
  }
  arg1 = *argp1; 
  ccmc::timeInterpolatorObjects = arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_timeInterpolatorObjects_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::unordered_map< int,ccmc::TimeInterpolator * > result;
  
  (void)jenv;
  (void)jcls;
  result = ccmc::timeInterpolatorObjects;
  *(boost::unordered_map< int,ccmc::TimeInterpolator * > **)&jresult = new boost::unordered_map< int,ccmc::TimeInterpolator * >((const boost::unordered_map< int,ccmc::TimeInterpolator * > &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Interpolator_1interpolate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Interpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Interpolator_1interpolate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Interpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Interpolator_1interpolate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Interpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Interpolator_1interpolate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Interpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Interpolator_1getConversionFactor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jfloat jresult = 0 ;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  std::string *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Interpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (float)(arg1)->getConversionFactor((std::string const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Interpolator_1getConversionFactor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Interpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  result = (float)(arg1)->getConversionFactor((long const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Interpolator_1getModelName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Interpolator **)&jarg1; 
  result = (arg1)->getModelName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1Interpolator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::Interpolator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1KameleonInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  ccmc::KameleonInterpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (ccmc::KameleonInterpolator *)new ccmc::KameleonInterpolator(arg1);
  *(ccmc::KameleonInterpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_KameleonInterpolator_1interpolate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::KameleonInterpolator *arg1 = (ccmc::KameleonInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::KameleonInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_KameleonInterpolator_1interpolate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::KameleonInterpolator *arg1 = (ccmc::KameleonInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::KameleonInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_KameleonInterpolator_1interpolate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::KameleonInterpolator *arg1 = (ccmc::KameleonInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::KameleonInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_KameleonInterpolator_1interpolate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::KameleonInterpolator *arg1 = (ccmc::KameleonInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::KameleonInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1KameleonInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::KameleonInterpolator *arg1 = (ccmc::KameleonInterpolator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::KameleonInterpolator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Tracer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  ccmc::Tracer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Kameleon **)&jarg1; 
  result = (ccmc::Tracer *)new ccmc::Tracer(arg1);
  *(ccmc::Tracer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1Tracer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1setInnerBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setInnerBoundary(arg2);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1setMaxIterations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxIterations(arg2);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1setDn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setDn(arg2);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1setTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setTilt(arg2);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1setMissing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMissing(arg2);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1setMaxArcLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMaxArcLength(arg2);
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1bidirectionalTrace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  Fieldline result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (arg1)->bidirectionalTrace((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  *(Fieldline **)&jresult = new Fieldline((const Fieldline &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1bidirectionalTraceWithDipole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  Fieldline result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (arg1)->bidirectionalTraceWithDipole((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  *(Fieldline **)&jresult = new Fieldline((const Fieldline &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1unidirectionalTrace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jint jarg6) {
  jlong jresult = 0 ;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  ccmc::Tracer::Direction *arg6 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  ccmc::Tracer::Direction temp6 ;
  Fieldline result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  temp6 = (ccmc::Tracer::Direction)jarg6; 
  arg6 = &temp6; 
  result = (arg1)->unidirectionalTrace((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,(ccmc::Tracer::Direction const &)*arg6);
  *(Fieldline **)&jresult = new Fieldline((const Fieldline &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1unidirectionalTrace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  Fieldline result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (arg1)->unidirectionalTrace((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  *(Fieldline **)&jresult = new Fieldline((const Fieldline &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1unidirectionalTraceWithDipole_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jint jarg6) {
  jlong jresult = 0 ;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  ccmc::Tracer::Direction *arg6 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  ccmc::Tracer::Direction temp6 ;
  Fieldline result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  temp6 = (ccmc::Tracer::Direction)jarg6; 
  arg6 = &temp6; 
  result = (arg1)->unidirectionalTraceWithDipole((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,(ccmc::Tracer::Direction const &)*arg6);
  *(Fieldline **)&jresult = new Fieldline((const Fieldline &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1unidirectionalTraceWithDipole_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  Fieldline result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (arg1)->unidirectionalTraceWithDipole((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  *(Fieldline **)&jresult = new Fieldline((const Fieldline &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1findLastClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  Point3f arg2 ;
  int arg3 ;
  Point3f *argp2 ;
  Fieldline result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  argp2 = *(Point3f **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point3f");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (arg1)->findLastClosed(arg2,arg3);
  *(Fieldline **)&jresult = new Fieldline((const Fieldline &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1getLastClosedFieldlines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< Fieldline > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (arg1)->getLastClosedFieldlines(arg2,arg3,arg4);
  *(std::vector< Fieldline > **)&jresult = new std::vector< Fieldline >((const std::vector< Fieldline > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  Fieldline *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  arg2 = *(Fieldline **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Fieldline & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isClosed(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1setUseMaxArcLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseMaxArcLength(arg2);
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1getVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  Point3f *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  ccmc::Interpolator *arg7 = (ccmc::Interpolator *) 0 ;
  Point3f result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg7_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(Point3f **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point3f const & reference is null");
    return 0;
  } 
  arg4 = *(float **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg5 = *(float **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(ccmc::Interpolator **)&jarg7; 
  result = (arg1)->getVector((std::string const &)*arg2,(Point3f const &)*arg3,*arg4,*arg5,*arg6,(ccmc::Interpolator const *)arg7);
  *(Point3f **)&jresult = new Point3f((const Point3f &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1setRegionOfInterest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  Point3f arg2 ;
  Point3f arg3 ;
  Point3f *argp2 ;
  Point3f *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  argp2 = *(Point3f **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point3f");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(Point3f **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point3f");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setRegionOfInterest(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Tracer_1setUseRegionOfInterest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Tracer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseRegionOfInterest(arg2);
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Fieldline_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::Fieldline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::Fieldline *)new ccmc::Fieldline();
  *(ccmc::Fieldline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Fieldline_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  ccmc::Fieldline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (ccmc::Fieldline *)new ccmc::Fieldline(arg1);
  *(ccmc::Fieldline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1Fieldline(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1insertPointData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  Point3f *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = *(Point3f **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point3f const & reference is null");
    return ;
  } 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  (arg1)->insertPointData((Point3f const &)*arg2,(float const &)*arg3);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1removePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removePoint(arg2);
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1reverseOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  ccmc::Fieldline result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (arg1)->reverseOrder();
  *(ccmc::Fieldline **)&jresult = new ccmc::Fieldline((const ccmc::Fieldline &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1reverseOrderInPlace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  (arg1)->reverseOrderInPlace();
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getPositions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< Point3f > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (std::vector< Point3f > *) &(arg1)->getPositions();
  *(std::vector< Point3f > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (std::vector< float > *) &(arg1)->getData();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  Point3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Point3f *) &(arg1)->getPosition(arg2);
  *(Point3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getData(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getStartPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  Point3f result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (arg1)->getStartPoint();
  *(Point3f **)&jresult = new Point3f((const Point3f &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1setStartPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  Point3f arg2 ;
  Point3f *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  argp2 = *(Point3f **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point3f");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setStartPoint(arg2);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1setVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setVariable(arg2);
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (std::string *) &(arg1)->getVariable();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (std::vector< float > *) &(arg1)->getDs();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< Point3f > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (std::vector< Point3f > *) &(arg1)->getElements();
  *(std::vector< Point3f > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  Point3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Point3f *) &(arg1)->getElement(arg2);
  *(Point3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1integrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (std::vector< float > *) &(arg1)->integrate();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1derivative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (std::vector< float > *) &(arg1)->derivative();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (std::vector< float > *) &(arg1)->measure();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getLength(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getIntegral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getIntegral(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1interpolate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  int arg3 ;
  ccmc::Fieldline result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->interpolate(arg2,arg3);
  *(ccmc::Fieldline **)&jresult = new ccmc::Fieldline((const ccmc::Fieldline &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getNearest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (std::vector< int > *) &(arg1)->getNearest();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1getTlocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (std::vector< float > *) &(arg1)->getTlocal();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1minmax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  (arg1)->minmax();
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1mincount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mincount = arg2;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1mincount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (int) ((arg1)->mincount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1maxcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxcount = arg2;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1maxcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (int) ((arg1)->maxcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1minima_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2; 
  if (arg1) (arg1)->minima = *arg2;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1minima_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (std::vector< int > *)& ((arg1)->minima);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1maxima_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2; 
  if (arg1) (arg1)->maxima = *arg2;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1maxima_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (std::vector< int > *)& ((arg1)->maxima);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1GlobMinIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->GlobMinIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1GlobMinIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (int) ((arg1)->GlobMinIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1GlobMaxIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->GlobMaxIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Fieldline_1GlobMaxIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Fieldline **)&jarg1; 
  result = (int) ((arg1)->GlobMaxIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Point3f_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  ccmc::Point3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  result = (ccmc::Point3f *)new ccmc::Point3f((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  *(ccmc::Point3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Point3f_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jint jarg4) {
  jlong jresult = 0 ;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  ccmc::Point3f::Coordinates arg4 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  ccmc::Point3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  arg4 = (ccmc::Point3f::Coordinates)jarg4; 
  result = (ccmc::Point3f *)new ccmc::Point3f((float const &)*arg1,(float const &)*arg2,(float const &)*arg3,arg4);
  *(ccmc::Point3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Point3f_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Point3f *arg1 = 0 ;
  ccmc::Point3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ccmc::Point3f const & reference is null");
    return 0;
  } 
  result = (ccmc::Point3f *)new ccmc::Point3f((ccmc::Point3f const &)*arg1);
  *(ccmc::Point3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Point3f_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::Point3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::Point3f *)new ccmc::Point3f();
  *(ccmc::Point3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Point3f_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ccmc::Point3f::Coordinates arg1 ;
  ccmc::Point3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ccmc::Point3f::Coordinates)jarg1; 
  result = (ccmc::Point3f *)new ccmc::Point3f(arg1);
  *(ccmc::Point3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  (arg1)->normalize();
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  result = ((ccmc::Point3f const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1magnitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  result = (float)(arg1)->magnitude();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1distance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  ccmc::Point3f *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  arg2 = *(ccmc::Point3f **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ccmc::Point3f const & reference is null");
    return 0;
  } 
  result = (float)((ccmc::Point3f const *)arg1)->distance((ccmc::Point3f const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1component1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->component1 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1component1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  result = (float) ((arg1)->component1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1component2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->component2 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1component2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  result = (float) ((arg1)->component2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1component3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->component3 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1component3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  result = (float) ((arg1)->component3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1setCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  ccmc::Point3f::Coordinates arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  arg2 = (ccmc::Point3f::Coordinates)jarg2; 
  (arg1)->setCoordinates(arg2);
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1getCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  ccmc::Point3f::Coordinates result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  result = (ccmc::Point3f::Coordinates)(arg1)->getCoordinates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Point3f_1getCartesian(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  ccmc::Point3f result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  result = (arg1)->getCartesian();
  *(ccmc::Point3f **)&jresult = new ccmc::Point3f((const ccmc::Point3f &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1Point3f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::Point3f **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Attribute_1getAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Attribute **)&jarg1; 
  result = (arg1)->getAttributeName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Attribute_1setAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Attribute **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setAttributeName(arg2);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Attribute_1setAttributeValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Attribute **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (arg1)->setAttributeValue(*arg2);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Attribute_1setAttributeValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  int *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Attribute **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  (arg1)->setAttributeValue(*arg2);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Attribute_1setAttributeValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  float *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Attribute **)&jarg1; 
  arg2 = *(float **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  (arg1)->setAttributeValue(*arg2);
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Attribute_1getAttributeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  ccmc::Attribute::AttributeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Attribute **)&jarg1; 
  result = (ccmc::Attribute::AttributeType)(arg1)->getAttributeType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Attribute_1getAttributeFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Attribute **)&jarg1; 
  result = (float)(arg1)->getAttributeFloat();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Attribute_1getAttributeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Attribute **)&jarg1; 
  result = (arg1)->getAttributeString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Attribute_1getAttributeInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Attribute **)&jarg1; 
  result = (int)(arg1)->getAttributeInt();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Attribute(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::Attribute *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::Attribute *)new ccmc::Attribute();
  *(ccmc::Attribute **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Attribute_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Attribute **)&jarg1; 
  result = ((ccmc::Attribute const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1Attribute(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::Attribute **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1BUSY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ccmc::Model::BUSY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ccmc::Model::OK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->open((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1setModelName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setModelName(arg2);
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getModelName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (arg1)->getModelName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1loadVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->loadVariable((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1unloadVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->unloadVariable((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1loadVariableInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->loadVariableInt((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getVariableFromMapRW_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getVariableFromMapRW((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getIntVariableFromMapRW_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< int > *)(arg1)->getIntVariableFromMapRW((std::string const &)*arg2);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getVariableFromMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getVariableFromMap((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getIntVariableFromMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< int > *)(arg1)->getIntVariableFromMap((std::string const &)*arg2);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getVariableFromMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  long arg2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< float > *)(arg1)->getVariableFromMap(arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getIntVariableFromMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  long arg2 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< int > *)(arg1)->getIntVariableFromMap(arg2);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getVariableFromMapRW_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  long arg2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< float > *)(arg1)->getVariableFromMapRW(arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getIntVariableFromMapRW_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  long arg2 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< int > *)(arg1)->getIntVariableFromMapRW(arg2);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getLoadedVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (arg1)->getLoadedVariables();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1setMissingValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMissingValue(arg2);
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getMissingValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (float)(arg1)->getMissingValue();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getConversionFactorToSI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jfloat jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (float)(arg1)->getConversionFactorToSI((std::string const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getNativeUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getNativeUnit((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getSIUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getSIUnit((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getProgress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (int)(arg1)->getProgress();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1getBusyStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (int)(arg1)->getBusyStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (long)(arg1)->close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1createNewInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  ccmc::Interpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (ccmc::Interpolator *)(arg1)->createNewInterpolator();
  *(ccmc::Interpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1Model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::Model **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1OpenGGCM(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::OpenGGCM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::OpenGGCM *)new ccmc::OpenGGCM();
  *(ccmc::OpenGGCM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->open((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1createNewInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  ccmc::Interpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  result = (ccmc::Interpolator *)(arg1)->createNewInterpolator();
  *(ccmc::Interpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getXGrid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getXGrid((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getXGrid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  long arg2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< float > *)(arg1)->getXGrid(arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getYGrid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getYGrid((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getYGrid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  long arg2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< float > *)(arg1)->getYGrid(arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getZGrid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getZGrid((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getZGrid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  long arg2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< float > *)(arg1)->getZGrid(arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getXGridName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getXGridName((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getXGridName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getXGridName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getYGridName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getYGridName((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getYGridName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getYGridName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getZGridName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getZGridName((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getZGridName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getZGridName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1getLoadedVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  result = (arg1)->getLoadedVariables();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1OpenGGCM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::OpenGGCM **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1BATSRUS(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::BATSRUS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::BATSRUS *)new ccmc::BATSRUS();
  *(ccmc::BATSRUS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_BATSRUS_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::BATSRUS *arg1 = (ccmc::BATSRUS *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::BATSRUS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->open((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_BATSRUS_1createNewInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::BATSRUS *arg1 = (ccmc::BATSRUS *) 0 ;
  ccmc::Interpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::BATSRUS **)&jarg1; 
  result = (ccmc::Interpolator *)(arg1)->createNewInterpolator();
  *(ccmc::Interpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_BATSRUS_1getLoadedVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::BATSRUS *arg1 = (ccmc::BATSRUS *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::BATSRUS **)&jarg1; 
  result = (arg1)->getLoadedVariables();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1BATSRUS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::BATSRUS *arg1 = (ccmc::BATSRUS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::BATSRUS **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1ENLIL(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::ENLIL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::ENLIL *)new ccmc::ENLIL();
  *(ccmc::ENLIL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_ENLIL_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::ENLIL *arg1 = (ccmc::ENLIL *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::ENLIL **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->open((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_ENLIL_1createNewInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::ENLIL *arg1 = (ccmc::ENLIL *) 0 ;
  ccmc::Interpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::ENLIL **)&jarg1; 
  result = (ccmc::Interpolator *)(arg1)->createNewInterpolator();
  *(ccmc::Interpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_ENLIL_1getChangeSignFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::ENLIL *arg1 = (ccmc::ENLIL *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::ENLIL **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->getChangeSignFlag(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_ENLIL_1getChangeSignFlagByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ccmc::ENLIL *arg1 = (ccmc::ENLIL *) 0 ;
  long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::ENLIL **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->getChangeSignFlagByID(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_ENLIL_1getLoadedVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::ENLIL *arg1 = (ccmc::ENLIL *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::ENLIL **)&jarg1; 
  result = (arg1)->getLoadedVariables();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1ENLIL(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::ENLIL *arg1 = (ccmc::ENLIL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::ENLIL **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1MAS(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::MAS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::MAS *)new ccmc::MAS();
  *(ccmc::MAS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->open((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1createNewInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  ccmc::Interpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  result = (ccmc::Interpolator *)(arg1)->createNewInterpolator();
  *(ccmc::Interpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getRPosGrid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getRPosGrid((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getRPosGrid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< float > *)(arg1)->getRPosGrid(arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getRPosGridName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getRPosGridName((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getRPosGridName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getRPosGridName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getLatPosGrid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getLatPosGrid((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getLatPosGrid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< float > *)(arg1)->getLatPosGrid(arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getLatPosGridName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getLatPosGridName((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getLatPosGridName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getLatPosGridName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getLonPosGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (std::vector< float > *)(arg1)->getLonPosGrid(arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getlonPosGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::vector< float > *)(arg1)->getlonPosGrid((std::string const &)*arg2);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getLonPosGridName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getLonPosGridName((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getLonPosGridName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (arg1)->getLonPosGridName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getChangeSignFlag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->getChangeSignFlag(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getChangeSignFlag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->getChangeSignFlag(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1getLoadedVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MAS **)&jarg1; 
  result = (arg1)->getLoadedVariables();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1MAS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::MAS **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1SWMFIono(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::SWMFIono *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::SWMFIono *)new ccmc::SWMFIono();
  *(ccmc::SWMFIono **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_SWMFIono_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ccmc::SWMFIono *arg1 = (ccmc::SWMFIono *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::SWMFIono **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (long)(arg1)->open((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_SWMFIono_1createNewInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::SWMFIono *arg1 = (ccmc::SWMFIono *) 0 ;
  ccmc::Interpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::SWMFIono **)&jarg1; 
  result = (ccmc::Interpolator *)(arg1)->createNewInterpolator();
  *(ccmc::Interpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_SWMFIono_1getLoadedVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::SWMFIono *arg1 = (ccmc::SWMFIono *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::SWMFIono **)&jarg1; 
  result = (arg1)->getLoadedVariables();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1SWMFIono(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::SWMFIono *arg1 = (ccmc::SWMFIono *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::SWMFIono **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1BATSRUSInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  ccmc::BATSRUSInterpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (ccmc::BATSRUSInterpolator *)new ccmc::BATSRUSInterpolator(arg1);
  *(ccmc::BATSRUSInterpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_BATSRUSInterpolator_1interpolate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::BATSRUSInterpolator *arg1 = (ccmc::BATSRUSInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::BATSRUSInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_BATSRUSInterpolator_1interpolate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::BATSRUSInterpolator *arg1 = (ccmc::BATSRUSInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::BATSRUSInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_BATSRUSInterpolator_1interpolate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::BATSRUSInterpolator *arg1 = (ccmc::BATSRUSInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::BATSRUSInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_BATSRUSInterpolator_1interpolate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::BATSRUSInterpolator *arg1 = (ccmc::BATSRUSInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::BATSRUSInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1BATSRUSInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::BATSRUSInterpolator *arg1 = (ccmc::BATSRUSInterpolator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::BATSRUSInterpolator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1ENLILInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  ccmc::ENLILInterpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (ccmc::ENLILInterpolator *)new ccmc::ENLILInterpolator(arg1);
  *(ccmc::ENLILInterpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_ENLILInterpolator_1interpolate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::ENLILInterpolator *arg1 = (ccmc::ENLILInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::ENLILInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_ENLILInterpolator_1interpolate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::ENLILInterpolator *arg1 = (ccmc::ENLILInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::ENLILInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_ENLILInterpolator_1interpolate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::ENLILInterpolator *arg1 = (ccmc::ENLILInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::ENLILInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_ENLILInterpolator_1interpolate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::ENLILInterpolator *arg1 = (ccmc::ENLILInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::ENLILInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1ENLILInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::ENLILInterpolator *arg1 = (ccmc::ENLILInterpolator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::ENLILInterpolator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1MASInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  ccmc::MASInterpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (ccmc::MASInterpolator *)new ccmc::MASInterpolator(arg1);
  *(ccmc::MASInterpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MASInterpolator_1interpolate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::MASInterpolator *arg1 = (ccmc::MASInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MASInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MASInterpolator_1interpolate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::MASInterpolator *arg1 = (ccmc::MASInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MASInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MASInterpolator_1interpolate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::MASInterpolator *arg1 = (ccmc::MASInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MASInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MASInterpolator_1interpolate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::MASInterpolator *arg1 = (ccmc::MASInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::MASInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1MASInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::MASInterpolator *arg1 = (ccmc::MASInterpolator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::MASInterpolator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1OpenGGCMInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  ccmc::OpenGGCMInterpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (ccmc::OpenGGCMInterpolator *)new ccmc::OpenGGCMInterpolator(arg1);
  *(ccmc::OpenGGCMInterpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCMInterpolator_1interpolate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCMInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCMInterpolator_1interpolate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCMInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCMInterpolator_1interpolate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCMInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCMInterpolator_1interpolate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCMInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCMInterpolator_1getConversionFactor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jfloat jresult = 0 ;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCMInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (float)(arg1)->getConversionFactor((std::string const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCMInterpolator_1getConversionFactor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::OpenGGCMInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  result = (float)(arg1)->getConversionFactor((long const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1OpenGGCMInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::OpenGGCMInterpolator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1SWMFIonoInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  ccmc::SWMFIonoInterpolator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Model **)&jarg1; 
  result = (ccmc::SWMFIonoInterpolator *)new ccmc::SWMFIonoInterpolator(arg1);
  *(ccmc::SWMFIonoInterpolator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_SWMFIonoInterpolator_1interpolate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::SWMFIonoInterpolator *arg1 = (ccmc::SWMFIonoInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::SWMFIonoInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_SWMFIonoInterpolator_1interpolate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::SWMFIonoInterpolator *arg1 = (ccmc::SWMFIonoInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::SWMFIonoInterpolator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_SWMFIonoInterpolator_1interpolate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jfloat jresult = 0 ;
  ccmc::SWMFIonoInterpolator *arg1 = (ccmc::SWMFIonoInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::SWMFIonoInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_SWMFIonoInterpolator_1interpolate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jfloat jresult = 0 ;
  ccmc::SWMFIonoInterpolator *arg1 = (ccmc::SWMFIonoInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  long temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::SWMFIonoInterpolator **)&jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  arg8 = *(float **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1SWMFIonoInterpolator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::SWMFIonoInterpolator *arg1 = (ccmc::SWMFIonoInterpolator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::SWMFIonoInterpolator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Time_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  ccmc::Time *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (ccmc::Time *)new ccmc::Time((std::string const &)*arg1);
  *(ccmc::Time **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Time_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  ccmc::Time *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (ccmc::Time *)new ccmc::Time(arg1);
  *(ccmc::Time **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1Time_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ccmc::Time *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ccmc::Time *)new ccmc::Time();
  *(ccmc::Time **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1getDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  result = (short)((ccmc::Time const *)arg1)->getDay();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1setDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->setDay(arg2);
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1setEpoch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEpoch(arg2);
}


SWIGEXPORT jshort JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1getHour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  result = (short)((ccmc::Time const *)arg1)->getHour();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1setHour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->setHour(arg2);
}


SWIGEXPORT jshort JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1getMilliseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  result = (short)((ccmc::Time const *)arg1)->getMilliseconds();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1setMilliseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->setMilliseconds(arg2);
}


SWIGEXPORT jshort JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1getMinute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  result = (short)((ccmc::Time const *)arg1)->getMinute();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1setMinute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->setMinute(arg2);
}


SWIGEXPORT jshort JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1getMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  result = (short)((ccmc::Time const *)arg1)->getMonth();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1setMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->setMonth(arg2);
}


SWIGEXPORT jshort JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1getSeconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  result = (short)((ccmc::Time const *)arg1)->getSeconds();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1setSeconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSeconds(arg2);
}


SWIGEXPORT jshort JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1getYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  result = (short)((ccmc::Time const *)arg1)->getYear();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1setYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->setYear(arg2);
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  result = ((ccmc::Time const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Time_1getEpoch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ccmc::Time **)&jarg1; 
  result = (double)((ccmc::Time const *)arg1)->getEpoch();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ccmc::Time **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1vector_1point3f_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vector< Point3f > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vector< Point3f > *)new vector< Point3f >();
  *(vector< Point3f > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1vector_1point3f_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  vector< ccmc::Point3f >::size_type arg1 ;
  vector< Point3f > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (vector< ccmc::Point3f >::size_type)jarg1; 
  result = (vector< Point3f > *)new vector< Point3f >(arg1);
  *(vector< Point3f > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1point3f_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Point3f > **)&jarg1; 
  result = ((vector< Point3f > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1point3f_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Point3f > **)&jarg1; 
  result = ((vector< Point3f > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1point3f_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Point3f > **)&jarg1; 
  arg2 = (vector< ccmc::Point3f >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1point3f_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Point3f > **)&jarg1; 
  result = (bool)((vector< Point3f > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1point3f_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Point3f > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1point3f_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(vector< Point3f > **)&jarg1; 
  arg2 = *(vector< ccmc::Point3f >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< ccmc::Point3f >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((vector< ccmc::Point3f >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1point3f_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  int arg2 ;
  std::vector< ccmc::Point3f >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Point3f > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ccmc::Point3f >::value_type *) &vector_Sl_Point3f_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ccmc::Point3f >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1point3f_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  int arg2 ;
  vector< ccmc::Point3f >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(vector< Point3f > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(vector< ccmc::Point3f >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< ccmc::Point3f >::value_type const & reference is null");
    return ;
  } 
  try {
    vector_Sl_Point3f_Sg__set(arg1,arg2,(ccmc::Point3f const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1vector_1point3f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vector< Point3f > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1vector_1string_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vector< std::string > *)new vector< std::string >();
  *(vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1vector_1string_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  vector< std::string >::size_type arg1 ;
  vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (vector< std::string >::size_type)jarg1; 
  result = (vector< std::string > *)new vector< std::string >(arg1);
  *(vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1string_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< std::string > **)&jarg1; 
  result = ((vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1string_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< std::string > **)&jarg1; 
  result = ((vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1string_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< std::string > **)&jarg1; 
  arg2 = (vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1string_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< std::string > **)&jarg1; 
  result = (bool)((vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1string_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1string_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1string_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1string_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  int arg2 ;
  vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1vector_1string(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1vector_1float_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vector< float > *)new vector< float >();
  *(vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1vector_1float_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  vector< float >::size_type arg1 ;
  vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (vector< float >::size_type)jarg1; 
  result = (vector< float > *)new vector< float >(arg1);
  *(vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1float_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< float > **)&jarg1; 
  result = ((vector< float > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1float_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< float > **)&jarg1; 
  result = ((vector< float > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1float_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< float > **)&jarg1; 
  arg2 = (vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1float_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  vector< float > *arg1 = (vector< float > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< float > **)&jarg1; 
  result = (bool)((vector< float > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1float_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  vector< float > *arg1 = (vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< float > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1float_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::value_type *arg2 = 0 ;
  vector< float >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< float > **)&jarg1; 
  temp2 = (vector< float >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((vector< float >::value_type const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1float_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  vector< float > *arg1 = (vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float >::value_type *) &vector_Sl_float_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1float_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  vector< float > *arg1 = (vector< float > *) 0 ;
  int arg2 ;
  vector< float >::value_type *arg3 = 0 ;
  vector< float >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (vector< float >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    vector_Sl_float_Sg__set(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1vector_1float(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vector< float > *arg1 = (vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vector< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1vector_1fieldline_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vector< Fieldline > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vector< Fieldline > *)new vector< Fieldline >();
  *(vector< Fieldline > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1vector_1fieldline_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  vector< ccmc::Fieldline >::size_type arg1 ;
  vector< Fieldline > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (vector< ccmc::Fieldline >::size_type)jarg1; 
  result = (vector< Fieldline > *)new vector< Fieldline >(arg1);
  *(vector< Fieldline > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1fieldline_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Fieldline > **)&jarg1; 
  result = ((vector< Fieldline > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1fieldline_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Fieldline > **)&jarg1; 
  result = ((vector< Fieldline > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1fieldline_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Fieldline > **)&jarg1; 
  arg2 = (vector< ccmc::Fieldline >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1fieldline_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Fieldline > **)&jarg1; 
  result = (bool)((vector< Fieldline > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1fieldline_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Fieldline > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1fieldline_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(vector< Fieldline > **)&jarg1; 
  arg2 = *(vector< ccmc::Fieldline >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< ccmc::Fieldline >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((vector< ccmc::Fieldline >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1fieldline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  int arg2 ;
  std::vector< ccmc::Fieldline >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Fieldline > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ccmc::Fieldline >::value_type *) &vector_Sl_Fieldline_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ccmc::Fieldline >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1fieldline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  int arg2 ;
  vector< ccmc::Fieldline >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(vector< Fieldline > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(vector< ccmc::Fieldline >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< ccmc::Fieldline >::value_type const & reference is null");
    return ;
  } 
  try {
    vector_Sl_Fieldline_Sg__set(arg1,arg2,(ccmc::Fieldline const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1vector_1fieldline(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vector< Fieldline > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1vector_1int_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vector< int > *)new vector< int >();
  *(vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_new_1vector_1int_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  vector< int >::size_type arg1 ;
  vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (vector< int >::size_type)jarg1; 
  result = (vector< int > *)new vector< int >(arg1);
  *(vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1int_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int > **)&jarg1; 
  result = ((vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1int_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int > **)&jarg1; 
  result = ((vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1int_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int > **)&jarg1; 
  arg2 = (vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1int_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  vector< int > *arg1 = (vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int > **)&jarg1; 
  result = (bool)((vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1int_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  vector< int > *arg1 = (vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1int_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::value_type *arg2 = 0 ;
  vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int > **)&jarg1; 
  temp2 = (vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1int_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  vector< int > *arg1 = (vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_vector_1int_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  vector< int > *arg1 = (vector< int > *) 0 ;
  int arg2 ;
  vector< int >::value_type *arg3 = 0 ;
  vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_delete_1vector_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vector< int > *arg1 = (vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_CDFFileReader_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::FileReader **)&baseptr = *(ccmc::CDFFileReader **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_KameleonInterpolator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::Interpolator **)&baseptr = *(ccmc::KameleonInterpolator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_Model_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::GeneralFileReader **)&baseptr = *(ccmc::Model **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCM_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::Model **)&baseptr = *(ccmc::OpenGGCM **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_BATSRUS_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::Model **)&baseptr = *(ccmc::BATSRUS **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_ENLIL_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::Model **)&baseptr = *(ccmc::ENLIL **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MAS_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::Model **)&baseptr = *(ccmc::MAS **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_SWMFIono_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::Model **)&baseptr = *(ccmc::SWMFIono **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_BATSRUSInterpolator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::Interpolator **)&baseptr = *(ccmc::BATSRUSInterpolator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_ENLILInterpolator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::Interpolator **)&baseptr = *(ccmc::ENLILInterpolator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_MASInterpolator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::Interpolator **)&baseptr = *(ccmc::MASInterpolator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_OpenGGCMInterpolator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::Interpolator **)&baseptr = *(ccmc::OpenGGCMInterpolator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_gov_nasa_gsfc_ccmc_CCMCJNI_SWMFIonoInterpolator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ccmc::Interpolator **)&baseptr = *(ccmc::SWMFIonoInterpolator **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

